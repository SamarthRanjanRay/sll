b-1

#Write a python program to read in a list of numbers.
#Use one-line comprehensions of create a new list of even numbers.
#Create another list reversing the elements.
S = [x**2 for x in range(10)] # read elements  to list
M = [x for x in S if x % 2 == 0]
M.reverse()
#Write a python program to count the frequency of words in a given file.
from collections import Counter
def word_count(fname):
        with open(fname) as f:
                return Counter(f.read().split())

print("Number of words in the file :",word_count("test.txt"))
#!/usr/bin/env python
#Introduction to Python : Classes & Objects, Functions
#b)   Write a recursive python function that has a parameter representing a list of integers
#and returns the maximum stored in the list.
#Hint: The maximum is either the first value in the list or the maximum of the rest of
#the list whichever is larger. If the list only has 1 integer, then its maximum is this
#single value, naturally. Demonstrate with some examples.

# Note : Handle all other corner cases which are not handled here

def Max(list):
    if len(list) == 1:
        return list[0]
    else:
        m = Max(list[1:])
        return m if m > list[0] else list[0]

def main():
	try:
		list = eval(input("Enter a list of numbers: "))
		print ("The largest number is: ", Max(list))
	except SyntaxError:
		print ("Please enter comma separated numbers")
	except:
		print ("Enter only numbers")

main()


b-2
def celciustofarenhiet(c):
    return (c*(9/5) + 32)

def farenhiettocelcius(p):
    return ((p-32)*(5/9))

def celciustokelvin(x):
    return (x+273.15)

def kelvintocelcius(y):
    return (y-273.15)

def farenhiettokelvin(a):
    return celciustokelvin(farenhiettocelcius(a))

def kelvintofarenhiet(b):
    return celciustofarenhiet(kelvintocelcius(b))

select = "y"
op1=[]
op2=[]
op3=[]
op4=[]
op5=[]
op6=[]


while(select=="y" or select == "Y"):
    op = input("Enter the selection: 1.C->F  2.F->C  3.C->K  4.K->C  5.F->K  6.K->F \n")
    if(op=="1" or op=="2" or op=="3" or op=="4" or op=="5" or op=="6"):
        if(op=="1"):
            c = float(input("Enter the temperature in celsius:  "))
            op1 = op1 +[(c,celciustofarenhiet(c))]
            print("Celsius to Farenhiet\n")
            print(sorted(op1))
        elif(op=="2"):
            p = float(input("Enter the temperature in farenhiet:  "))
            op2=op2 + [(p,farenhiettocelcius(p))]
            print("Farenhiet to Celsius\n")
            print(sorted(op2))
        elif(op=="3"):
            x = float(input("Enter the temperature in celsius:  "))
            op3=op3 + [(x,celciustokelvin(x))]
            print("Celsius to Kelvin\n")
            print(sorted(op3))
        elif(op=="4"):
            y = float(input("Enter the temperature in kelvin:  "))
            op4 = op4+[(y,kelvintocelcius(y))]
            print("Kelvin to Celsius\n")
            print(sorted(op4))
        elif(op=="5"):
            a = float(input("Enter the temperature in farenhiet:  "))
            op5=op5+[(a,farenhiettokelvin(a))]
            print("Farenhiet to Kelvin\n")
            print(sorted(op5))
        elif(op=="6"):
            b = float(input("Enter the temperature in kelvin:  "))
            op6=op6+[(b,kelvintofarenhiet(b))]
            print("Kelvin to Farenhiet\n")
            print(sorted(op6))
    else:
        print("Invalid Input")
    select = input("Enter Y to continue and N to terminate\n")



b-3

#!/usr/bin/env python


#Introduction to Python : Classes & Objects, Functions
#a)   Write a python class to reverse a sentence (initialized via constructor) word by word.
#That is: “I am here” should be reversed as “here am I”. Create instances of this class
#for each of the three strings input by the user and display the reversed string for each,
#in descending order of number of vowels in the string

# Note : Handle all other corner cases which are not handled here
class SentenceReverser:
	vowels = ["a","e","i","o","u"]
	sentence = ""
	reverse = ""
	vowelCount = 0
	def __init__(self,sentence):
		self.sentence = sentence
		self.reverseSentence()
	def reverseSentence(self):
		self.reverse = " ".join(reversed(self.sentence.split()))
	def getVowelCount(self):
		self.vowelCount = sum(s in self.vowels for s in self.sentence.lower())
		return self.vowelCount
	def getReverse(self):
		return self.reverse

items = []

for i in range(3):
	sentence = input("Enter a phrase : ")
	reverser = SentenceReverser(sentence.strip())
	items.append(reverser)
	print()

sortedItems = sorted(items, key=lambda item: item.getVowelCount(), reverse=True)

print ("Sorted on vowel count (descending) : \n")
for i in range(len(sortedItems)):
	print ("Reverse : ", sortedItems[i].getReverse(), ", Vowel Count : ", sortedItems[i].getVowelCount())


b-4
"""Python for Data Science - Perform Data Science on Titanic Dataset
a)Load the Titanic dataset into one of the data structures (NumPy or Pandas).
b)Display header rows and description of the loaded dataset.
c) Remove unnecessary features (E.g. drop unwanted columns) from the dataset.
d) Manipulate data by replacing empty column values with a default value.
e) Perform the following visualizations on the loaded dataset:
     i)   Passenger status (Survived/Died) against Passenger Class
     ii)  Survival rate of male vs female
     iii) No of passengers in each age group


#numpy - Deals multi-dimensional arrays and matrices
#seaborn - Deals with data visualization
#matplotlib - Plotting; pyplot-interactive plotting
#pandas - data structures and data analysis tools"""
#import numpy as np 
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
titanic_df = pd.read_csv('train.csv')

# Convert the survived column to strings for easier reading
titanic_df ['Survived'] = titanic_df ['Survived'].map({
    0: 'Died',
    1: 'Survived'
})

print("======Data Headers Before Dropping Columns=======")
print(titanic_df.head(5))

print("**** \n\nDATA TRANSFORMATION *****\n")

print("======Data Headers After Dropping Columns - First Way=======")
titanic_df.drop(['Parch','PassengerId','Name','Ticket'], axis=1, inplace=True)
#axis =1 in drop method shows you are dropping a column
#inplace=True means you are editing original dataframe
print(titanic_df.head(5))
print("======Data Headers After Dropping Columns - Second Way =======")
titanic_df = titanic_df.drop(['SibSp','Fare'], axis=1)
print(titanic_df.head(5))


# Convert the Class column to strings for easier reading
titanic_df ['Pclass'] = titanic_df ['Pclass'].map({
    1: 'Luxury Class',
    2: 'Economy Class',
    3: 'Lower Class'
})

print("======Data Headers After Transforming Class Column =======")
print(titanic_df.head(5))

titanic_df["Embarked"] = titanic_df["Embarked"].fillna("S")
print("======Data Headers After Filling with default value for Embarked Column =======")
print(titanic_df.head(5))

# Convert the Embarked column to strings for easier reading
titanic_df ['Embarked'] = titanic_df ['Embarked'].map({
    'C':'Cherbourg',
    'Q':'Queenstown',
    'S':'Southampton'
})
print("======Data Headers After Transforming Embarked Column =======")
print(titanic_df.head(5))

print("\n\n\n**** DATA VISUALIZATIONS****\n\n")
print("Visualization #1 : Survival Rate Based on Passenger Sitting Class")
ax = sns.countplot(x = 'Pclass', hue = 'Survived', palette = 'Set1',data = titanic_df)
ax.set(title = 'Passenger status (Survived/Died) against Passenger Class',
       xlabel = 'Passenger Class', ylabel = 'Total')
plt.show()   

#crosstab - Cross tabulation of two or more factors
print("Visualization #2 : Survival Rate Based on Gender")
print(pd.crosstab(titanic_df["Sex"],titanic_df.Survived))
ax = sns.countplot(x = 'Sex', hue = 'Survived', palette = 'Set2', data = titanic_df)
ax.set(title = 'Total Survivors According to Sex', xlabel = 'Sex', ylabel='Total')
plt.show()

print("Visualization #3 : Survival Rate Based on Passenger Age Group")
# We look at Age column and set Intevals on the ages and the map them to their categories as
# (Children, Teen, Adult, Old)
interval = (0,18,35,60,120)
categories = ['Children','Teens','Adult', 'Old']
#cut - Segment and sort data values into bins
titanic_df['Age_cats'] = pd.cut(titanic_df.Age, interval, labels = categories)

ax = sns.countplot(x = 'Age_cats',  data = titanic_df, hue = 'Survived', palette = 'Set3')

ax.set(xlabel='Age Categorical', ylabel='Total',
       title="Age Categorical Survival Distribution")
plt.show()

print("Visualization #4 : Survival Rate Based on Passenger Embarked Port")
print(pd.crosstab(titanic_df['Embarked'], titanic_df.Survived))
ax = sns.countplot(x = 'Embarked', hue = 'Survived', palette = 'Set1', data = titanic_df)
ax.set(title = 'Survival distribution according to Embarking place')
plt.show()


b-5
#!/usr/bin/env python

# Note : Handle all other corner cases which are not handled here

import sys
import os
from functools import reduce

# Write a python program to read contents of a file (filename as argument)
# and store number of occurrences of each word in a dictionary.

dict = {}
wordLen = []

if(len(sys.argv) != 2):
	print ("Invalid Arguments")
	sys.exit()

if(not(os.path.exists(sys.argv[0]))):
	print ("Invalid File Path")
	sys.exit()

if(sys.argv[1].split('.')[-1] != "txt"):
	print ("Invalid File Format. Only TXT files allowed")
	sys.exit()

with open(sys.argv[1]) as file:
	for line in file:
		for word in line.split():
			dict[word] = dict.get(word,0) + 1
	# print dict

# Display the top 10 words with most number of occurrences in descending order.

# Food for thought - Does a dictionary maintain order? How to print 10 words with most frequency?
# Ans - extract dict items as Tuples and sort them based on value in dictionary
#(second item of the tuple / index 1)

sortedDict = sorted(dict.items(), key=lambda dictItem: dictItem[1], reverse=True)
for i in range(len(sortedDict)):
	print(sortedDict[i])


for i in range(10):
	try:
		wordTuple = sortedDict[i]
		wordLen.append(len(wordTuple[0]))
		print (wordTuple[0], ", Frequency: " , wordTuple[1] , ", Length " , len(wordTuple[0]))
	except IndexError:
		print ("File has less than 10 words")
		break

print ("Lengths of 10 most frequently occuring words:")
print (wordLen)


# Write a one-line reduce function to get the average length

sum = reduce(lambda x,y: x+y, wordLen)
print ("Average length of words: " , sum/len(wordLen))


# Write a one-line list comprehension to display squares of all odd numbers

squares = [x**2 for x in wordLen if x%2 != 0]
print ("Squres of odd word lengths: ")
print (squares)


a-1
a=[]
size=int(input("Enter size of list"))
for i in range(0,size):
	ele=int(input("enter elements of list"))
	a.append(ele)
print("The list contains",a)
mini=min(a)
maxi=max(a)
print("Minimum and maximum elements are :", mini, maxi)

ele=int(input("Enter new element to be inserted"))
pos=int(input("Enter position of the element"))
a.insert(pos,ele)

print("The modified list as follows:",a)

ele=int(input("Enter element to be removed"))
a.remove(ele)
print("The modified list as follows:",a)

ele=int(input("Enter element to be found"))
if ele in a:
	print("Element is found at",a.index(ele))
else:
	print("Element not found")


a-2
class Rectangle:
	def __init__(self):
		self.l = int(input("Enter length"))
		self.b = int(input("Enter breadth"))
	def area(self):
		print("The area of the given rectangle is",self.l*self.b)

R=Rectangle()
R.area()


a-3
def AtomicDictionary(): 
	Atomic_elements = {"C":"Carbon","B":"Boron","N":"Nitrogen","S":"Sulphur"}
	print(Atomic_elements)
	new_symbol=input("enter the symbol ")
	new_element=input("enter the element ")
	if new_symbol in Atomic_elements.keys():
		print("Key exists and hence value is replaced")
	else:
		print("New key and value added to dictionary")
	Atomic_elements[new_symbol]=new_element
	print(Atomic_elements)
	print("length of dictionary -",len(Atomic_elements))
	search_key=input("enter the symbol to search ")
	if search_key in Atomic_elements.keys():
		print(Atomic_elements[search_key])
	else:
		print("Key does not exist in dictionary")



'''Place this in a different python script and call the fucntion'''

AtomicDictionary()



a-4
class Student:
	name = ""
	age = 0
	sublist = []
	def __init__(self,x,y,l):
		self.name = x
		self.age = y
		self.sublist=l
	def accept(self):
		self.name = input("Enter name: ")
		self.age = input("Enter age: ")
		print("Enter marks of subjects\n")
		l = input()
		l = l.split(" ")
		x = []
		for i in range(len(l)):
			x.append(int(l[i]))
			self.sublist = x
	def disp(self):
		print(self.name)
		print(self.age)
		print(self.sublist)





s1 = Student('shri',20,[90,80,95])
s1.disp()

s2 = Student('sanj',23,[60,82,75])
s2.disp()
s2.accept()
s2.disp()



a-5
from functools import reduce
mylist=[1,2,3,4,5,6]
print("Original",mylist)
newlist=[x*3 for x in mylist]
print("New",newlist)
or_sum = reduce(lambda x,y: x+y,mylist)
print("Original sum",or_sum)
new_sum = reduce(lambda x,y: x+y,newlist)
print("New sum",new_sum)
